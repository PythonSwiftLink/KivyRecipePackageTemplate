# This workflow will build a KivySwiftLink release

name: make release


on:

  workflow_dispatch:
    inputs:
      tag:
        description: 'input new release tag'
        required: true
        type: string
      lastest:
        description: 'lastest release?'
        required: false
        type: boolean
        default: false

jobs:
  toolchainBuild:
    runs-on: macOS-13
    #runs-on: self-hosted
    permissions:
        contents: write
    env:
      recipe: custom_lib
      path: custom_lib
      site_files: custom_lib, custom_lib
      
  
    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'
        
      - uses: actions/checkout@v4
      
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # install the python version needed
      
      - name: brew installs
        run: |
          brew tap PythonSwiftLink/tools
          brew install swiftpackagegen
      
      # - name: chmod tools
      #   run: |
      #     chmod 755 tools/SwiftPackageGen
      #     chmod 755 tools/PSProject
      
      - name: install kivy-ios
        run: |
          python3 -m pip install --upgrade pip
          
          #pip3 install https://github.com/kivy/kivy-ios/archive/master.zip
          git clone https://github.com/kivy/kivy-ios
          
          # new kivy recipe patches before building it.
          
          # curl -O https://github.com/kivy/kivy/archive/2.2.1.zip
          # or
          git clone --depth 1 -b 2.2.1 https://github.com/kivy/kivy
          
          ##### open cv fix #####
          
          cp package_templates/camera_avfoundation_implem.m kivy/kivy/core/camera/camera_avfoundation_implem.m
          ls kivy-ios/kivy_ios/recipes
          ##### apply modified kivy to recipe as "src" #####
          mv kivy kivy-ios/kivy_ios/recipes/kivy/src

          cp -r ${{env.recipe_path}} kivy-ios/kivy_ios/recipes/

      - name: modify kivy recipe
        shell: python
        run: |
          init_path = "kivy-ios/kivy_ios/recipes/kivy/__init__.py"
          with open(init_path, "r") as input_file:
            init = input_file.read()
            init = init.replace("url = \"https://github.com/kivy/kivy/archive/{version}.zip\"", "url = \"src\"")
            print(init)
            with open(init_path, "w") as output_file:
              output_file.write(init)
      
      - name: install modified kivy-ios
        run: |
          pip3 install -e kivy-ios

      #### build phase ####
      
      - name: build hostpython3
        run: toolchain build hostpython3


      - name: build python3
        run: toolchain build python3

      - name: build custom recipe
        run: toolchain build ${{env.recipe}}

      - name: move numpy build
        run: |
          mkdir -p output/${{env.recipe}}/

          PY_SITE=dist/root/python3/lib/python3.${{ matrix.version }}/site-packages
          mv -f $PY_SITE/numpy output/numpy/numpy-site
          rm -rf $PY_SITE/*
          cd output/numpy
          zip -r numpy-site.zip numpy-site
          rm -rf numpy-site

      - name: build kivy
        run: toolchain build kivy
      - name: build pillow
        run: toolchain build pillow
      

      # taking out necessary libraries and zipping them into "output" folder
      - name: repack python3.${{ matrix.version }} / numpy xcframework
        run: |
          #mkdir output
          cp -rf dist/xcframework output/
          
          PY_HEADERS=dist/root/python3/include/python3.${{ matrix.version }}
          PY_XC=output/xcframework/libpython3.${{ matrix.version }}.xcframework
          cp -rf $PY_HEADERS $PY_XC/ios-arm64/
          cp -rf $PY_HEADERS $PY_XC/ios-x86_64-simulator/
          cp -f plists/python3${{ matrix.version }}.plist $PY_XC/Info.plist

          NUMPY_HEADERS=dist/include/common/numpy/numpy
          NUMPY_XC=output/xcframework/libnumpy.xcframework
          cp -rf $NUMPY_HEADERS $NUMPY_XC/ios-arm64/
          cp -rf $NUMPY_HEADERS $NUMPY_XC/ios-x86_64-simulator/
          cp -f plists/numpy.plist $NUMPY_XC/Info.plist

      
      - name: repack & zip python site-packages
        run: |
          PY_LIB=dist/root/python3/lib
          mkdir -p output/python
          mkdir -p output/kivy

          mv $PY_LIB/python3.${{ matrix.version }}/site-packages site-packages
          zip -r site-packages.zip site-packages
          mv -f site-packages.zip output/kivy/
          
          mv $PY_LIB output/python/python_lib
          #mv $PY_LIB python_lib
          #zip -r python_lib.zip python_lib
          #mv -f python_lib.zip output/python/
          

      - name: repack & zip dist_libs
        id: repack_dist
        run: |
          mv dist/lib output/dist_lib
          cd output
          IOS_LIBS=dist_lib/iphoneos
          SIM_LIBS=dist_lib/iphonesimulator
          
          echo $IOS_LIBS
          echo $SIM_LIBS

          ###### numpy #######
          mkdir -p numpy/$IOS_LIBS
          mv -f $IOS_LIBS/libnpymath.a numpy/$IOS_LIBS/
          mv -f $IOS_LIBS/libnpyrandom.a numpy/$IOS_LIBS/
          mv -f $IOS_LIBS/libnumpy.a numpy/$IOS_LIBS/
          echo transfered numpy/$IOS_LIBS


          mkdir -p numpy/$SIM_LIBS
          mv -f $SIM_LIBS/libnpymath.a numpy/$SIM_LIBS/
          mv -f $SIM_LIBS/libnpyrandom.a numpy/$SIM_LIBS/
          mv -f $SIM_LIBS/libnumpy.a numpy/$SIM_LIBS/
          echo transfered numpy/$SIM_LIBS

          ###### python ######

          mkdir -p python/$IOS_LIBS
          mv -f $IOS_LIBS/libcrypto.a python/$IOS_LIBS/
          mv -f $IOS_LIBS/libssl.a python/$IOS_LIBS/
          mv -f $IOS_LIBS/libffi.a python/$IOS_LIBS/
          mv -f $IOS_LIBS/libpython3.${{ matrix.version }}.a python/$IOS_LIBS/
          echo transfered python/$IOS_LIBS

          mkdir -p python/$SIM_LIBS
          mv -f $SIM_LIBS/libcrypto.a python/$SIM_LIBS/
          mv -f $SIM_LIBS/libssl.a python/$SIM_LIBS/
          mv -f $SIM_LIBS/libffi.a python/$SIM_LIBS/
          mv -f $SIM_LIBS/libpython3.${{ matrix.version }}.a python/$SIM_LIBS/
          echo transfered python/$SIM_LIBS


          ###### kivy #######
          mkdir -p kivy/$IOS_LIBS
          mv -f $IOS_LIBS kivy/$IOS_LIBS
          echo transfered kivy/$IOS_LIBS

          mkdir -p kivy/$SIM_LIBS
          mv -f $SIM_LIBS kivy/$SIM_LIBS
          echo transfered python/$SIM_LIBS

      - name: python_dist.zip
        working-directory: output/python
        run: |
          zip -r python_dist.zip dist_lib
          rm -rf dist_lib

      - name: kivy_dist.zip
        working-directory: output/kivy
        run: |
          zip -r kivy_dist.zip dist_lib
          rm -rf dist_lib
      
      - name: numpy_dist.zip
        working-directory: ./output/numpy
        run: |
          zip -r numpy_dist.zip dist_lib
          rm -rf dist_lib
          

      - name: move and zip xcframeworks
        working-directory: ./output/xcframework
        run: |
          mv -f libpython3.${{ matrix.version }}.xcframework libpython3${{ matrix.version }}.xcframework
          for FILE in *; 
              do 
                  #filename="$FILE"
                  #echo $filename
                  zip -r "${FILE%.*}".zip $FILE
                  rm -rf $FILE
              done

      - name: pack python xcframeworks
        working-directory: ./output
        run: |
          mkdir python/xcframework

          mv -f xcframework/libcrypto.zip python/xcframework/
          mv -f xcframework/libffi.zip python/xcframework/
          mv -f xcframework/libssl.zip python/xcframework/
          mv -f xcframework/libpython3${{ matrix.version }}.zip python/xcframework/
    
      - name: pack numpy xcframeworks
        working-directory: ./output
        run: |
          mkdir numpy/xcframework

          mv -f xcframework/libnumpy.zip numpy/xcframework/
          mv -f xcframework/libnpyrandom.zip numpy/xcframework/
          mv -f xcframework/libnpymath.zip numpy/xcframework/

      - name: pack xcframeworks as kivy
        working-directory: ./output
        run: |
          mv -f xcframework kivy/
      
      - name: update Python package.swift
        run: |
          SwiftPackageGen \
            ./package_templates/KivyPythonCore.yml \
            3${{ matrix.version }}.${{ github.event.inputs.tag }} \
            --output output/python/Package.swift
      
      - name: update Kivy package.swift
        run: |
          SwiftPackageGen \
            ./package_templates/KivyCore.yml \
            3${{ matrix.version }}.${{ github.event.inputs.tag }} \
            --output output/kivy/Package.swift

      - name: update Numpy package.swift
        run: |
          SwiftPackageGen \
            ./package_templates/KivyNumpy.yml \
            3${{ matrix.version }}.${{ github.event.inputs.tag }} \
            --output output/numpy/Package.swift            
          
      # uploading "output" folder for the next task to use. (ubuntu machine)
      - uses: actions/upload-artifact@v3
        with:
          name: release-output-3${{ matrix.version }}
          path: ./output

  ###############################################################################
  ###############################################################################
  ###############################################################################
  #moving next part to an ubuntu machine
  create_package:
    name: Release Packages
    runs-on: ubuntu-latest
    needs: [toolchainBuild]
    strategy:
      matrix:
        version: [10, 11, 12]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/download-artifact@v3
        with:
          name: release-output-3${{ matrix.version }}

      - name: create KivyPythonCore
        run: |
          #cp -rf package_templates/KivyPythonCore KivyPythonCore
          mkdir -p KivyPythonCore/Sources
          cp -rf package_templates/PythonLibrary KivyPythonCore/Sources/
          cp -f python/Package.swift KivyPythonCore/
          cp -rf package_templates/PythonCore/Sources/PythonCore KivyPythonCore/Sources/

          mv -f python/python_lib KivyPythonCore/Sources/PythonLibrary/lib


      # commit new package to kivypythoncore/master
      - name: commit KivyPythonCore to master
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.Homebrew }}
        with:
          source-directory: 'KivyPythonCore'
          destination-github-username: 'pythonswiftlink'
          destination-repository-name: 'KivyPythonCore'
          user-email: pythonswiftlink@gmail.com
          target-branch: master

      - name: release KivyPythonCore
        uses: ncipollo/release-action@v1
        with:
          artifacts: "python/python_dist.zip, python/xcframework/*.zip"
          tag: 3${{ matrix.version }}.${{ github.event.inputs.tag }}
          repo: KivyPythonCore
          token: ${{ secrets.Homebrew }}
          allowUpdates: true
          makeLatest: ${{ github.event.inputs.lastest }}

      - name: create KivyCore
        run: |
          cp -rf package_templates/KivyCore KivyCore
          cp -f kivy/Package.swift KivyCore/
          

      - name: Download a kivy-ios master as asset for release
        run: |
          git clone https://github.com/kivy/kivy-ios.git
          zip -r kivy-ios.zip kivy-ios
          mv -f kivy-ios.zip kivy/

      # commit new package to kivyswiftlink/master
      - name: commit KivyCore to master
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.Homebrew }}
        with:
          source-directory: 'KivyCore'
          destination-github-username: 'pythonswiftlink'
          destination-repository-name: 'KivyCore'
          user-email: pythonswiftlink@gmail.com
          target-branch: master
      
      # create a new release from master and python_lib.zip / dist_lib.zip to the release
      - name: release KivyCore
        uses: ncipollo/release-action@v1
        with:
          artifacts: "kivy/kivy_dist.zip, kivy/site-packages.zip, kivy/kivy-ios.zip, kivy/xcframework/*.zip"
          tag: 3${{ matrix.version }}.${{ github.event.inputs.tag }}
          repo: KivyCore
          token: ${{ secrets.Homebrew }}
          allowUpdates: true
          makeLatest: ${{ github.event.inputs.lastest }}
      
      - name: create KivyNumpy
        run: |
          mkdir -p KivyNumpy/Sources
          touch KivyNumpy/Sources/KivyNumpy.swift
          cp -f numpy/Package.swift KivyNumpy/

      # commit new package to kivyswiftlink/master
      - name: commit KivyNumpy to master
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.Homebrew }}
        with:
          source-directory: 'KivyNumpy'
          destination-github-username: 'pythonswiftlink'
          destination-repository-name: 'KivyNumpy'
          user-email: pythonswiftlink@gmail.com
          target-branch: master

      # create a new release from master and python_lib.zip / dist_lib.zip to the release
      - name: release KivyNumpy
        uses: ncipollo/release-action@v1
        with:
          artifacts: "numpy/numpy_dist.zip, numpy/numpy-site.zip, numpy/xcframework/*.zip"
          tag: 3${{ matrix.version }}.${{ github.event.inputs.tag }}
          repo: KivyNumpy
          token: ${{ secrets.Homebrew }}
          allowUpdates: true
          makeLatest: ${{ github.event.inputs.lastest }}
 
